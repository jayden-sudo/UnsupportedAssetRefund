//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue
} from "@axiom-crypto/experimental/halo2-js";
import { CircuitValue256 } from "@axiom-crypto/experimental/v2/circuit/CircuitValue256";
const defaultInputs = {
  blockNumber: 9917884,
  txIdx: 7,
  logIdx: 0
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  blockNumber: CircuitValue;
  txIdx: CircuitValue;
  logIdx: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  { blockNumber, txIdx, logIdx }: CircuitValueInputs
) => {
  const { constant, add, or, checkEqual, value, log } = halo2Lib;
  const { getReceipt, addToCallback } = axiomData;
  //
  //                 _                 _____  ______ _____  _
  //     /\         (_)               |  __ \|  ____|  __ \| |
  //    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
  //   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
  //  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
  // /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
  //
  //

  /*
    Proof of token transfer Protocol:
        Can prove that the user has a specific transfer record in history (currently only supports ERC20)
 */

  /*

input:
// tx: 0xf933eca9b16146f199b052b071f9c70117a8554bc6b7238cd6492faacef805bf
{
    "blockNumber": 9917884,
    "txIdx": 7,
    "logIdx": 0
}


 */

  // Transfer (index_topic_1 address from, index_topic_2 address to, uint256 value)
  const transferEventSchema =
    "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
  const transferEventSchema_hi = constant(
    BigInt("0xddf252ad1be2c89b69c2b068fc378daa")
  );
  const transferEventSchema_lo = constant(
    BigInt("0x952ba7f163c4a11628f55a4df523b3ef")
  );

  const receipt = getReceipt(blockNumber, txIdx);
  const receiptLog = receipt.log(logIdx);
  const eventSchema = receiptLog.topic(0);

  checkEqual(eventSchema.hi(), transferEventSchema_hi);
  checkEqual(eventSchema.lo(), transferEventSchema_lo);

  const transfer_from = receiptLog.topic(1, transferEventSchema);
  const transfer_to = receiptLog.topic(2, transferEventSchema);
  const transfer_value = receiptLog.data(0, transferEventSchema);

  // keccak256(abi.encode(blockNumber, txIndex, logIndex, token, from, to, value))

  // blockNumber
  addToCallback(blockNumber);
  // txIndex
  addToCallback(txIdx);
  // logIndex
  addToCallback(logIdx);
  // token
  addToCallback(receiptLog.address());
  // from
  addToCallback(transfer_from);
  // to
  addToCallback(transfer_to);
  // value
  addToCallback(transfer_value);
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  80,
  19,
  233,
  14,
  46,
  238,
  174,
  65,
  127,
  237,
  216,
  222,
  161,
  7,
  242,
  82,
  41,
  206,
  135,
  203,
  72,
  60,
  96,
  127,
  33,
  129,
  232,
  57,
  57,
  40,
  158,
  2,
  60,
  124,
  45,
  15,
  106,
  134,
  167,
  177,
  66,
  89,
  113,
  19,
  174,
  47,
  216,
  113,
  122,
  137,
  35,
  155,
  0,
  235,
  185,
  153,
  61,
  125,
  244,
  57,
  147,
  139,
  182,
  44,
  238,
  145,
  145,
  206,
  81,
  9,
  232,
  205,
  28,
  154,
  222,
  170,
  53,
  88,
  221,
  233,
  8,
  106,
  124,
  151,
  106,
  188,
  169,
  83,
  253,
  108,
  120,
  52,
  79,
  153,
  41,
  4,
  191,
  87,
  251,
  70,
  169,
  168,
  31,
  90,
  11,
  191,
  125,
  161,
  101,
  52,
  47,
  49,
  253,
  233,
  210,
  85,
  126,
  37,
  215,
  62,
  28,
  24,
  167,
  197,
  80,
  147,
  168,
  7,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  197,
  61,
  105,
  206,
  173,
  21,
  101,
  189,
  251,
  169,
  214,
  17,
  76,
  60,
  117,
  114,
  220,
  94,
  123,
  27,
  2,
  96,
  156,
  129,
  84,
  97,
  176,
  204,
  183,
  164,
  103,
  10,
  129,
  14,
  209,
  16,
  43,
  222,
  38,
  116,
  116,
  201,
  214,
  105,
  223,
  106,
  197,
  13,
  215,
  135,
  35,
  8,
  85,
  165,
  170,
  119,
  229,
  112,
  97,
  226,
  233,
  82,
  244,
  33,
  247,
  226,
  105,
  90,
  80,
  233,
  177,
  14,
  150,
  194,
  29,
  116,
  104,
  180,
  255,
  2,
  122,
  4,
  123,
  237,
  229,
  140,
  236,
  119,
  69,
  189,
  255,
  249,
  198,
  158,
  246,
  7,
  172,
  46,
  193,
  122,
  102,
  36,
  219,
  21,
  141,
  5,
  87,
  100,
  118,
  65,
  185,
  253,
  82,
  174,
  108,
  0,
  85,
  85,
  80,
  29,
  55,
  25,
  72,
  225,
  211,
  181,
  74,
  36,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  5,
  113,
  0,
  137,
  6,
  170,
  94,
  39,
  11,
  116,
  145,
  153,
  10,
  254,
  25,
  49,
  156,
  117,
  128,
  124,
  71,
  251,
  151,
  93,
  53,
  162,
  29,
  147,
  6,
  91,
  29,
  26,
  34,
  112,
  1,
  209,
  179,
  68,
  55,
  162,
  253,
  170,
  158,
  58,
  143,
  157,
  29,
  144,
  28,
  23,
  20,
  65,
  175,
  245,
  111,
  173,
  51,
  38,
  249,
  148,
  169,
  19,
  96,
  42,
  209,
  186,
  174,
  40,
  202,
  28,
  56,
  224,
  229,
  90,
  248,
  11,
  237,
  196,
  123,
  97,
  235,
  127,
  43,
  119,
  151,
  233,
  190,
  247,
  209,
  204,
  249,
  16,
  144,
  148,
  98,
  40,
  189,
  149,
  174,
  27,
  61,
  219,
  82,
  34,
  238,
  2,
  118,
  221,
  8,
  118,
  152,
  141,
  217,
  104,
  199,
  66,
  70,
  209,
  65,
  163,
  9,
  41,
  188,
  106,
  112,
  211,
  91,
  38
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
